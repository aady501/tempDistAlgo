# place holder for the parts you are to do; may delete after you finish all
def TODO(hint = ''): return False
import time
import random

class BoardAI:
  def __init__(self, n):
    """create an empty n-by-n board, with indices starting at 1
    """
    self.board = {(i,j):0 for i in range(1,n+1) for j in range(1,n+1)}
    self.boardSize=n
  def move(self, id):
    """find next position for player id, update board, and return the position
    """
    pos = random.choice([(i,j) for (i,j) in self.board if self.board[i,j]==0])
    self.update(pos, id)
    print('---- move by player', id, ' : ', pos)
    return pos

  def update(self, pos, id):
    """update board to reflect that position pos is taken by player id
    """
    self.board[pos] = id
  
  def full(self):
    n=self.boardSize
    flag=0
    for i in range(1,n+1):
      for j in range(1,n+1):
        if self.board[(i,j)]==0:
          flag=1
          break
    if flag==1:
      return False
    else:
      return True

  def win(self, id):
    """print result if player id has won, and return whether id has won
    """
    n = self.boardSize
    for i in range(1,n+1):
      if self.board[(i,1)]==id:
        x=id
        flag=0
        for j in range(1,n+1):
          if self.board[(i,j)]!=x:
            flag=1
            break
        if flag==0:
          print('==== player', id, 'won: row', i)
          x=1 if id==2 else 2
          print("Player",x,": Congratulations to",id)
          return True

    for i in range(1,n+1):
      if self.board[(1,i)]==id:
        x=id
        flag=0
        for j in range(1,n+1):
          if self.board[(j,i)]!=x:
            flag=1
            break
        if flag==0:
          print('==== player', id, 'won: column', i)
          x=1 if id==2 else 2
          print("Player",x,": Congratulations to",id)
          return True
    if self.board[(1,1)]==id:
      flag=0
      #print("found",id,"at 1,1")
      for i in range(1,n+1):
        if self.board[(i,i)]!=id:
          #print("flag set found",id,"at",i,i)  
          flag=1
      #print("flag",flag)
      if flag==0:
        print('==== player', id, 'won: left diagonal')
        x=1 if id==2 else 2
        print("Player",x,": Congratulations to",id)
        return True
    if self.board[(1,n)]==id:
      flag=0
      #print("found",id,"at 1,",n)
      for i in range(1,n+1):
        if self.board[(i,n+1-i)]!=id:
          #print("flag set. found",id,"at",i,n+1-i)
          flag=1
      #print("flag",flag)
      if flag==0:
        x=1 if id==2 else 2      
        print('==== player', id, 'won: right diagonal')
        print("Player",x,":  Congratulations to",id)
        return True

    #if TODO('row i are all occupid by player id'):
    #  print('==== player', id, 'won: row', i); return True
    #if TODO('column j are all occupid by player id'):
    #  print('==== player', id, 'won: column', j); return True
    #if TODO('left diagonal are all occupid by player id'):
    #  print('==== player', id, 'won: left diagonal'); return True
    #if TODO('right diagonal are all occupid by player id'):
    #  print('==== player', id, 'won: right diagonal'); return True
    return False

  def finished(self):
    """return if some player has won, or if the board is full so it is a draw
    """
    if(self.win(1)):
      #print("Player 1 Won")
      return 1
    elif(self.win(2)):
      #print("Player 2 Won")
      return 2
    elif(self.full()):
      print("Its a Draw for us")
      return 0
    else:
      return -1

  def show(self, id):
    """show the board of player id; id is not needed for the show (line 4);
       it is used for printing with board atomically (line 2)
    """
    board = self.board;  Is = {i for (i,_) in board}
    print('board of ', id, ':',  board)
    marks = {0: '_', 1: 'o', 2: 'x'}
    print('\n'.join(' '.join(marks[board[i,j]] for j in Is) for i in Is)) 

class Player (process):
  def setup(board, id, ps):        # take board size, own id, other processes
    board.show(id)

  def run():
    #TODO('player 1 should start; play until finished')
    i=10
    if(id==1):
      pos1=board.move(1)
      board.show(1)
      send((pos1,id,),to=ps)
      #flag=1
    while(True):
      await(some(received((pos,id2),from_=ps)))
    #while(True):  
      #output("Ping from",x)
      board.update(pos,id2)
      if(board.finished()==-1):
        pos2 = board.move(id)
        board.show(id)
        send((pos2,id),to=ps)
        #await(some(received((y), clk=rclk), has=(rclk > clk)))
        #output(y) 
      else:
        #send(("Ping",),to=ps)
        break
    #output(board.finished())
    #await(board.finished()!=-1)
#class Player2(process):
#  def setup(board,id,ps):
#    board.show(id)
#  def run():
#    while(True):
#      await(some(received((pos,id2),from_=ps)))
#      board.update(pos,id2)
#      if(board.finished()==-1):
#        pos1=board.move(id)
#        board.show(id)
#        send((pos1,id),to=ps)
#      else:
#        break
    
      

  #def receive(msg= (pos,id2)):    # receive next position from player id2
    #TODO('take action seeing a move by player id2')
    #output("we received ",pos,id2)
    #board.update(pos,id2)
    #output("Next Move by",id)
    #if(board.finished()==-1):
      #pos2 = board.move(id)
      #output("Next board Show by id",id)
      #board.show(id)
      #output("sending pos and id to process",ps)
      #send((pos2,id,), to=ps)

def main():
  n = 3                            # size n for n-by-n board
  board = BoardAI(n)

  num_players = 2
  #TODO('create, setup, and start both players, with ids 1 and 2, respetively')
  p1 = new(Player)
  p2 = new(Player)
  setup(p1,(board,1,p2))
  setup(p2,(board,2,p1))
  start(p1)
  start(p2)
  
  
